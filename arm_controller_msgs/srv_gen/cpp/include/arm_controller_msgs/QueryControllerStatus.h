/* Auto-generated by genmsg_cpp for file /home/arm_user/ARM/mandy/control/arm_controller_msgs/srv/QueryControllerStatus.srv */
#ifndef ARM_CONTROLLER_MSGS_SERVICE_QUERYCONTROLLERSTATUS_H
#define ARM_CONTROLLER_MSGS_SERVICE_QUERYCONTROLLERSTATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "arm_controller_msgs/ControllerStatus.h"

namespace arm_controller_msgs
{
template <class ContainerAllocator>
struct QueryControllerStatusRequest_ {
  typedef QueryControllerStatusRequest_<ContainerAllocator> Type;

  QueryControllerStatusRequest_()
  {
  }

  QueryControllerStatusRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::arm_controller_msgs::QueryControllerStatusRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_controller_msgs::QueryControllerStatusRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct QueryControllerStatusRequest
typedef  ::arm_controller_msgs::QueryControllerStatusRequest_<std::allocator<void> > QueryControllerStatusRequest;

typedef boost::shared_ptr< ::arm_controller_msgs::QueryControllerStatusRequest> QueryControllerStatusRequestPtr;
typedef boost::shared_ptr< ::arm_controller_msgs::QueryControllerStatusRequest const> QueryControllerStatusRequestConstPtr;


template <class ContainerAllocator>
struct QueryControllerStatusResponse_ {
  typedef QueryControllerStatusResponse_<ContainerAllocator> Type;

  QueryControllerStatusResponse_()
  : status()
  {
  }

  QueryControllerStatusResponse_(const ContainerAllocator& _alloc)
  : status(_alloc)
  {
  }

  typedef  ::arm_controller_msgs::ControllerStatus_<ContainerAllocator>  _status_type;
   ::arm_controller_msgs::ControllerStatus_<ContainerAllocator>  status;


  typedef boost::shared_ptr< ::arm_controller_msgs::QueryControllerStatusResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_controller_msgs::QueryControllerStatusResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct QueryControllerStatusResponse
typedef  ::arm_controller_msgs::QueryControllerStatusResponse_<std::allocator<void> > QueryControllerStatusResponse;

typedef boost::shared_ptr< ::arm_controller_msgs::QueryControllerStatusResponse> QueryControllerStatusResponsePtr;
typedef boost::shared_ptr< ::arm_controller_msgs::QueryControllerStatusResponse const> QueryControllerStatusResponseConstPtr;

struct QueryControllerStatus
{

typedef QueryControllerStatusRequest Request;
typedef QueryControllerStatusResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct QueryControllerStatus
} // namespace arm_controller_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_controller_msgs::QueryControllerStatusRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_controller_msgs::QueryControllerStatusRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_controller_msgs::QueryControllerStatusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::arm_controller_msgs::QueryControllerStatusRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_controller_msgs::QueryControllerStatusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_controller_msgs/QueryControllerStatusRequest";
  }

  static const char* value(const  ::arm_controller_msgs::QueryControllerStatusRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_controller_msgs::QueryControllerStatusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::arm_controller_msgs::QueryControllerStatusRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::arm_controller_msgs::QueryControllerStatusRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_controller_msgs::QueryControllerStatusResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_controller_msgs::QueryControllerStatusResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_controller_msgs::QueryControllerStatusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a5100f18212dd0b493d04f04e4849186";
  }

  static const char* value(const  ::arm_controller_msgs::QueryControllerStatusResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa5100f18212dd0b4ULL;
  static const uint64_t static_value2 = 0x93d04f04e4849186ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_controller_msgs::QueryControllerStatusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_controller_msgs/QueryControllerStatusResponse";
  }

  static const char* value(const  ::arm_controller_msgs::QueryControllerStatusResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_controller_msgs::QueryControllerStatusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_controller_msgs/ControllerStatus status\n\
\n\
\n\
================================================================================\n\
MSG: arm_controller_msgs/ControllerStatus\n\
int32 return_code\n\
int32 SUCCESS=0\n\
int32 FAILURE=1\n\
string status\n\
string current_controller_stack\n\
\n\
";
  }

  static const char* value(const  ::arm_controller_msgs::QueryControllerStatusResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_controller_msgs::QueryControllerStatusRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct QueryControllerStatusRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_controller_msgs::QueryControllerStatusResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.status);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct QueryControllerStatusResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<arm_controller_msgs::QueryControllerStatus> {
  static const char* value() 
  {
    return "a5100f18212dd0b493d04f04e4849186";
  }

  static const char* value(const arm_controller_msgs::QueryControllerStatus&) { return value(); } 
};

template<>
struct DataType<arm_controller_msgs::QueryControllerStatus> {
  static const char* value() 
  {
    return "arm_controller_msgs/QueryControllerStatus";
  }

  static const char* value(const arm_controller_msgs::QueryControllerStatus&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<arm_controller_msgs::QueryControllerStatusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a5100f18212dd0b493d04f04e4849186";
  }

  static const char* value(const arm_controller_msgs::QueryControllerStatusRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<arm_controller_msgs::QueryControllerStatusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_controller_msgs/QueryControllerStatus";
  }

  static const char* value(const arm_controller_msgs::QueryControllerStatusRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<arm_controller_msgs::QueryControllerStatusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a5100f18212dd0b493d04f04e4849186";
  }

  static const char* value(const arm_controller_msgs::QueryControllerStatusResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<arm_controller_msgs::QueryControllerStatusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_controller_msgs/QueryControllerStatus";
  }

  static const char* value(const arm_controller_msgs::QueryControllerStatusResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ARM_CONTROLLER_MSGS_SERVICE_QUERYCONTROLLERSTATUS_H

