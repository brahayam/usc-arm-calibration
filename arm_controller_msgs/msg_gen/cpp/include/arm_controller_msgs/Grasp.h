/* Auto-generated by genmsg_cpp for file /home/test_user/usc-arm-calibration/arm_controller_msgs/msg/Grasp.msg */
#ifndef ARM_CONTROLLER_MSGS_MESSAGE_GRASP_H
#define ARM_CONTROLLER_MSGS_MESSAGE_GRASP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace arm_controller_msgs
{
template <class ContainerAllocator>
struct Grasp_ {
  typedef Grasp_<ContainerAllocator> Type;

  Grasp_()
  : command(0)
  , desired_grasp_force()
  {
    desired_grasp_force.assign(0.0);
  }

  Grasp_(const ContainerAllocator& _alloc)
  : command(0)
  , desired_grasp_force()
  {
    desired_grasp_force.assign(0.0);
  }

  typedef int32_t _command_type;
  int32_t command;

  typedef boost::array<double, 3>  _desired_grasp_force_type;
  boost::array<double, 3>  desired_grasp_force;

  enum { GRASP = 0 };
  enum { RELEASE = 1 };
  enum { R_RF = 0 };
  enum { R_MF = 1 };
  enum { R_LF = 2 };

  typedef boost::shared_ptr< ::arm_controller_msgs::Grasp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_controller_msgs::Grasp_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Grasp
typedef  ::arm_controller_msgs::Grasp_<std::allocator<void> > Grasp;

typedef boost::shared_ptr< ::arm_controller_msgs::Grasp> GraspPtr;
typedef boost::shared_ptr< ::arm_controller_msgs::Grasp const> GraspConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_controller_msgs::Grasp_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_controller_msgs::Grasp_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_controller_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_controller_msgs::Grasp_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_controller_msgs::Grasp_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_controller_msgs::Grasp_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3b660fe2a9f73b778968b500bed89e45";
  }

  static const char* value(const  ::arm_controller_msgs::Grasp_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3b660fe2a9f73b77ULL;
  static const uint64_t static_value2 = 0x8968b500bed89e45ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_controller_msgs::Grasp_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_controller_msgs/Grasp";
  }

  static const char* value(const  ::arm_controller_msgs::Grasp_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_controller_msgs::Grasp_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# The command type\n\
int32 command\n\
\n\
# constants that correspond to the commands\n\
int32 GRASP=0\n\
int32 RELEASE=1\n\
\n\
# grasp parameters\n\
float64[3] desired_grasp_force\n\
\n\
\n\
#indexing\n\
int32 R_RF=0\n\
int32 R_MF=1\n\
int32 R_LF=2\n\
";
  }

  static const char* value(const  ::arm_controller_msgs::Grasp_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::arm_controller_msgs::Grasp_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_controller_msgs::Grasp_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.command);
    stream.next(m.desired_grasp_force);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Grasp_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_controller_msgs::Grasp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_controller_msgs::Grasp_<ContainerAllocator> & v) 
  {
    s << indent << "command: ";
    Printer<int32_t>::stream(s, indent + "  ", v.command);
    s << indent << "desired_grasp_force[]" << std::endl;
    for (size_t i = 0; i < v.desired_grasp_force.size(); ++i)
    {
      s << indent << "  desired_grasp_force[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.desired_grasp_force[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_CONTROLLER_MSGS_MESSAGE_GRASP_H

