/* Auto-generated by genmsg_cpp for file /home/jbinney/ws/arm/stacks/usc-arm-calibration/arm_controller_msgs/msg/FingerForceControlGains.msg */
#ifndef ARM_CONTROLLER_MSGS_MESSAGE_FINGERFORCECONTROLGAINS_H
#define ARM_CONTROLLER_MSGS_MESSAGE_FINGERFORCECONTROLGAINS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace arm_controller_msgs
{
template <class ContainerAllocator>
struct FingerForceControlGains_ {
  typedef FingerForceControlGains_<ContainerAllocator> Type;

  FingerForceControlGains_()
  : p_gains()
  , i_gains()
  {
    p_gains.assign(0.0);
    i_gains.assign(0.0);
  }

  FingerForceControlGains_(const ContainerAllocator& _alloc)
  : p_gains()
  , i_gains()
  {
    p_gains.assign(0.0);
    i_gains.assign(0.0);
  }

  typedef boost::array<double, 3>  _p_gains_type;
  boost::array<double, 3>  p_gains;

  typedef boost::array<double, 3>  _i_gains_type;
  boost::array<double, 3>  i_gains;

  enum { R_RF = 0 };
  enum { R_MF = 1 };
  enum { R_LF = 2 };

  typedef boost::shared_ptr< ::arm_controller_msgs::FingerForceControlGains_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_controller_msgs::FingerForceControlGains_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct FingerForceControlGains
typedef  ::arm_controller_msgs::FingerForceControlGains_<std::allocator<void> > FingerForceControlGains;

typedef boost::shared_ptr< ::arm_controller_msgs::FingerForceControlGains> FingerForceControlGainsPtr;
typedef boost::shared_ptr< ::arm_controller_msgs::FingerForceControlGains const> FingerForceControlGainsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_controller_msgs::FingerForceControlGains_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_controller_msgs::FingerForceControlGains_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_controller_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_controller_msgs::FingerForceControlGains_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_controller_msgs::FingerForceControlGains_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_controller_msgs::FingerForceControlGains_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ec04ae7deaf29fbb1d9de2ef2606c3cc";
  }

  static const char* value(const  ::arm_controller_msgs::FingerForceControlGains_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xec04ae7deaf29fbbULL;
  static const uint64_t static_value2 = 0x1d9de2ef2606c3ccULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_controller_msgs::FingerForceControlGains_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_controller_msgs/FingerForceControlGains";
  }

  static const char* value(const  ::arm_controller_msgs::FingerForceControlGains_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_controller_msgs::FingerForceControlGains_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64[3] p_gains\n\
float64[3] i_gains\n\
\n\
# constants for indexing into the above array\n\
int32 R_RF=0\n\
int32 R_MF=1\n\
int32 R_LF=2\n\
\n\
";
  }

  static const char* value(const  ::arm_controller_msgs::FingerForceControlGains_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::arm_controller_msgs::FingerForceControlGains_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_controller_msgs::FingerForceControlGains_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.p_gains);
    stream.next(m.i_gains);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FingerForceControlGains_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_controller_msgs::FingerForceControlGains_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_controller_msgs::FingerForceControlGains_<ContainerAllocator> & v) 
  {
    s << indent << "p_gains[]" << std::endl;
    for (size_t i = 0; i < v.p_gains.size(); ++i)
    {
      s << indent << "  p_gains[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.p_gains[i]);
    }
    s << indent << "i_gains[]" << std::endl;
    for (size_t i = 0; i < v.i_gains.size(); ++i)
    {
      s << indent << "  i_gains[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.i_gains[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_CONTROLLER_MSGS_MESSAGE_FINGERFORCECONTROLGAINS_H

