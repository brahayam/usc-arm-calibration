/* Auto-generated by genmsg_cpp for file /home/test_user/usc-arm-calibration/arm_controller_msgs/msg/EndEffectorState.msg */
#ifndef ARM_CONTROLLER_MSGS_MESSAGE_ENDEFFECTORSTATE_H
#define ARM_CONTROLLER_MSGS_MESSAGE_ENDEFFECTORSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Pose.h"
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Wrench.h"

namespace arm_controller_msgs
{
template <class ContainerAllocator>
struct EndEffectorState_ {
  typedef EndEffectorState_<ContainerAllocator> Type;

  EndEffectorState_()
  : header()
  , pose()
  , linear_velocity()
  , linear_acceleration()
  , angular_velocity()
  , angular_acceleration()
  , wrench()
  {
  }

  EndEffectorState_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , pose(_alloc)
  , linear_velocity(_alloc)
  , linear_acceleration(_alloc)
  , angular_velocity(_alloc)
  , angular_acceleration(_alloc)
  , wrench(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  pose;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _linear_velocity_type;
   ::geometry_msgs::Point_<ContainerAllocator>  linear_velocity;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _linear_acceleration_type;
   ::geometry_msgs::Point_<ContainerAllocator>  linear_acceleration;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _angular_velocity_type;
   ::geometry_msgs::Point_<ContainerAllocator>  angular_velocity;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _angular_acceleration_type;
   ::geometry_msgs::Point_<ContainerAllocator>  angular_acceleration;

  typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _wrench_type;
   ::geometry_msgs::Wrench_<ContainerAllocator>  wrench;


  typedef boost::shared_ptr< ::arm_controller_msgs::EndEffectorState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_controller_msgs::EndEffectorState_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct EndEffectorState
typedef  ::arm_controller_msgs::EndEffectorState_<std::allocator<void> > EndEffectorState;

typedef boost::shared_ptr< ::arm_controller_msgs::EndEffectorState> EndEffectorStatePtr;
typedef boost::shared_ptr< ::arm_controller_msgs::EndEffectorState const> EndEffectorStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_controller_msgs::EndEffectorState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_controller_msgs::EndEffectorState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_controller_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_controller_msgs::EndEffectorState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_controller_msgs::EndEffectorState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_controller_msgs::EndEffectorState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7334b661f8a7970e3dabc84c06718e09";
  }

  static const char* value(const  ::arm_controller_msgs::EndEffectorState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7334b661f8a7970eULL;
  static const uint64_t static_value2 = 0x3dabc84c06718e09ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_controller_msgs::EndEffectorState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_controller_msgs/EndEffectorState";
  }

  static const char* value(const  ::arm_controller_msgs::EndEffectorState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_controller_msgs::EndEffectorState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Standard ROS header\n\
Header header\n\
\n\
# pose of the robot\n\
geometry_msgs/Pose pose\n\
\n\
# velocities and torques\n\
geometry_msgs/Point linear_velocity\n\
geometry_msgs/Point linear_acceleration\n\
\n\
geometry_msgs/Point angular_velocity \n\
geometry_msgs/Point angular_acceleration\n\
\n\
# associated wrench\n\
geometry_msgs/Wrench wrench\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Wrench\n\
# This represents force in free space, seperated into \n\
# it's linear and angular parts.  \n\
Vector3  force\n\
Vector3  torque\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::arm_controller_msgs::EndEffectorState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::arm_controller_msgs::EndEffectorState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::arm_controller_msgs::EndEffectorState_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_controller_msgs::EndEffectorState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.pose);
    stream.next(m.linear_velocity);
    stream.next(m.linear_acceleration);
    stream.next(m.angular_velocity);
    stream.next(m.angular_acceleration);
    stream.next(m.wrench);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct EndEffectorState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_controller_msgs::EndEffectorState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_controller_msgs::EndEffectorState_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pose: ";
s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "linear_velocity: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_velocity);
    s << indent << "linear_acceleration: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_acceleration);
    s << indent << "angular_velocity: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_velocity);
    s << indent << "angular_acceleration: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_acceleration);
    s << indent << "wrench: ";
s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.wrench);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_CONTROLLER_MSGS_MESSAGE_ENDEFFECTORSTATE_H

