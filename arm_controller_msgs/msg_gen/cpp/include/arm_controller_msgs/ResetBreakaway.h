/* Auto-generated by genmsg_cpp for file /home/jbinney/ws/arm/stacks/usc-arm-calibration/arm_controller_msgs/msg/ResetBreakaway.msg */
#ifndef ARM_CONTROLLER_MSGS_MESSAGE_RESETBREAKAWAY_H
#define ARM_CONTROLLER_MSGS_MESSAGE_RESETBREAKAWAY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace arm_controller_msgs
{
template <class ContainerAllocator>
struct ResetBreakaway_ {
  typedef ResetBreakaway_<ContainerAllocator> Type;

  ResetBreakaway_()
  : fingers(0)
  , fast_reset(false)
  {
  }

  ResetBreakaway_(const ContainerAllocator& _alloc)
  : fingers(0)
  , fast_reset(false)
  {
  }

  typedef int32_t _fingers_type;
  int32_t fingers;

  typedef uint8_t _fast_reset_type;
  uint8_t fast_reset;

  enum { R_RF = 1 };
  enum { R_MF = 2 };
  enum { R_LF = 4 };
  enum { ALL_FINGERS = 7 };

  typedef boost::shared_ptr< ::arm_controller_msgs::ResetBreakaway_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_controller_msgs::ResetBreakaway_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ResetBreakaway
typedef  ::arm_controller_msgs::ResetBreakaway_<std::allocator<void> > ResetBreakaway;

typedef boost::shared_ptr< ::arm_controller_msgs::ResetBreakaway> ResetBreakawayPtr;
typedef boost::shared_ptr< ::arm_controller_msgs::ResetBreakaway const> ResetBreakawayConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_controller_msgs::ResetBreakaway_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_controller_msgs::ResetBreakaway_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_controller_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_controller_msgs::ResetBreakaway_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_controller_msgs::ResetBreakaway_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_controller_msgs::ResetBreakaway_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0f220a14db48a0cdca2e24fac2f89341";
  }

  static const char* value(const  ::arm_controller_msgs::ResetBreakaway_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0f220a14db48a0cdULL;
  static const uint64_t static_value2 = 0xca2e24fac2f89341ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_controller_msgs::ResetBreakaway_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_controller_msgs/ResetBreakaway";
  }

  static const char* value(const  ::arm_controller_msgs::ResetBreakaway_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_controller_msgs::ResetBreakaway_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# empty message to reset breakaway\n\
int32 fingers\n\
bool fast_reset\n\
\n\
int32 R_RF=1\n\
int32 R_MF=2\n\
int32 R_LF=4\n\
int32 ALL_FINGERS=7\n\
\n\
\n\
";
  }

  static const char* value(const  ::arm_controller_msgs::ResetBreakaway_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::arm_controller_msgs::ResetBreakaway_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_controller_msgs::ResetBreakaway_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.fingers);
    stream.next(m.fast_reset);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ResetBreakaway_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_controller_msgs::ResetBreakaway_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_controller_msgs::ResetBreakaway_<ContainerAllocator> & v) 
  {
    s << indent << "fingers: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fingers);
    s << indent << "fast_reset: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fast_reset);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_CONTROLLER_MSGS_MESSAGE_RESETBREAKAWAY_H

