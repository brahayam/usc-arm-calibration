/* Auto-generated by genmsg_cpp for file /home/jbinney/ws/arm/stacks/usc-arm-calibration/arm_controller_msgs/msg/PressureSensors.msg */
#ifndef ARM_CONTROLLER_MSGS_MESSAGE_PRESSURESENSORS_H
#define ARM_CONTROLLER_MSGS_MESSAGE_PRESSURESENSORS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace arm_controller_msgs
{
template <class ContainerAllocator>
struct PressureSensors_ {
  typedef PressureSensors_<ContainerAllocator> Type;

  PressureSensors_()
  : header()
  , palm()
  , right_finger()
  , middle_finger()
  , left_finger()
  {
    palm.assign(0.0);
    right_finger.assign(0.0);
    middle_finger.assign(0.0);
    left_finger.assign(0.0);
  }

  PressureSensors_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , palm()
  , right_finger()
  , middle_finger()
  , left_finger()
  {
    palm.assign(0.0);
    right_finger.assign(0.0);
    middle_finger.assign(0.0);
    left_finger.assign(0.0);
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef boost::array<double, 24>  _palm_type;
  boost::array<double, 24>  palm;

  typedef boost::array<double, 24>  _right_finger_type;
  boost::array<double, 24>  right_finger;

  typedef boost::array<double, 24>  _middle_finger_type;
  boost::array<double, 24>  middle_finger;

  typedef boost::array<double, 24>  _left_finger_type;
  boost::array<double, 24>  left_finger;

  enum { NUM_PRESSURE_CELLS_PER_ARRAY = 24 };

  typedef boost::shared_ptr< ::arm_controller_msgs::PressureSensors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_controller_msgs::PressureSensors_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PressureSensors
typedef  ::arm_controller_msgs::PressureSensors_<std::allocator<void> > PressureSensors;

typedef boost::shared_ptr< ::arm_controller_msgs::PressureSensors> PressureSensorsPtr;
typedef boost::shared_ptr< ::arm_controller_msgs::PressureSensors const> PressureSensorsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_controller_msgs::PressureSensors_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_controller_msgs::PressureSensors_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_controller_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_controller_msgs::PressureSensors_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_controller_msgs::PressureSensors_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_controller_msgs::PressureSensors_<ContainerAllocator> > {
  static const char* value() 
  {
    return "55551820909b04a2ce8b9d662963e448";
  }

  static const char* value(const  ::arm_controller_msgs::PressureSensors_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x55551820909b04a2ULL;
  static const uint64_t static_value2 = 0xce8b9d662963e448ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_controller_msgs::PressureSensors_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_controller_msgs/PressureSensors";
  }

  static const char* value(const  ::arm_controller_msgs::PressureSensors_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_controller_msgs::PressureSensors_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# message containing the pressure information\n\
\n\
# Standard ROS header\n\
Header header\n\
\n\
# each an array of 24 touch values\n\
int32 NUM_PRESSURE_CELLS_PER_ARRAY=24\n\
\n\
# each an array of 24 touch values\n\
float64[24] palm\n\
float64[24] right_finger\n\
float64[24] middle_finger\n\
float64[24] left_finger\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::arm_controller_msgs::PressureSensors_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::arm_controller_msgs::PressureSensors_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::arm_controller_msgs::PressureSensors_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_controller_msgs::PressureSensors_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.palm);
    stream.next(m.right_finger);
    stream.next(m.middle_finger);
    stream.next(m.left_finger);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PressureSensors_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_controller_msgs::PressureSensors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_controller_msgs::PressureSensors_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "palm[]" << std::endl;
    for (size_t i = 0; i < v.palm.size(); ++i)
    {
      s << indent << "  palm[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.palm[i]);
    }
    s << indent << "right_finger[]" << std::endl;
    for (size_t i = 0; i < v.right_finger.size(); ++i)
    {
      s << indent << "  right_finger[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.right_finger[i]);
    }
    s << indent << "middle_finger[]" << std::endl;
    for (size_t i = 0; i < v.middle_finger.size(); ++i)
    {
      s << indent << "  middle_finger[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.middle_finger[i]);
    }
    s << indent << "left_finger[]" << std::endl;
    for (size_t i = 0; i < v.left_finger.size(); ++i)
    {
      s << indent << "  left_finger[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.left_finger[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_CONTROLLER_MSGS_MESSAGE_PRESSURESENSORS_H

