/* Auto-generated by genmsg_cpp for file /home/test_user/usc-arm-calibration/arm_head_control/msg/LookAtGoal.msg */
#ifndef ARM_HEAD_CONTROL_MESSAGE_LOOKATGOAL_H
#define ARM_HEAD_CONTROL_MESSAGE_LOOKATGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace arm_head_control
{
template <class ContainerAllocator>
struct LookAtGoal_ {
  typedef LookAtGoal_<ContainerAllocator> Type;

  LookAtGoal_()
  : ptu_joint_angels()
  {
    ptu_joint_angels.assign(0.0);
  }

  LookAtGoal_(const ContainerAllocator& _alloc)
  : ptu_joint_angels()
  {
    ptu_joint_angels.assign(0.0);
  }

  typedef boost::array<double, 4>  _ptu_joint_angels_type;
  boost::array<double, 4>  ptu_joint_angels;


  typedef boost::shared_ptr< ::arm_head_control::LookAtGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_head_control::LookAtGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct LookAtGoal
typedef  ::arm_head_control::LookAtGoal_<std::allocator<void> > LookAtGoal;

typedef boost::shared_ptr< ::arm_head_control::LookAtGoal> LookAtGoalPtr;
typedef boost::shared_ptr< ::arm_head_control::LookAtGoal const> LookAtGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_head_control::LookAtGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_head_control::LookAtGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_head_control

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_head_control::LookAtGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_head_control::LookAtGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_head_control::LookAtGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fa6eef1924fccad85982c2c4b5e78c32";
  }

  static const char* value(const  ::arm_head_control::LookAtGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfa6eef1924fccad8ULL;
  static const uint64_t static_value2 = 0x5982c2c4b5e78c32ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_head_control::LookAtGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_head_control/LookAtGoal";
  }

  static const char* value(const  ::arm_head_control::LookAtGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_head_control::LookAtGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Define the goal\n\
float64[4] ptu_joint_angels\n\
\n\
";
  }

  static const char* value(const  ::arm_head_control::LookAtGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::arm_head_control::LookAtGoal_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_head_control::LookAtGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ptu_joint_angels);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LookAtGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_head_control::LookAtGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_head_control::LookAtGoal_<ContainerAllocator> & v) 
  {
    s << indent << "ptu_joint_angels[]" << std::endl;
    for (size_t i = 0; i < v.ptu_joint_angels.size(); ++i)
    {
      s << indent << "  ptu_joint_angels[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ptu_joint_angels[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_HEAD_CONTROL_MESSAGE_LOOKATGOAL_H

