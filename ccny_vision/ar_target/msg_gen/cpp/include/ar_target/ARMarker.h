/* Auto-generated by genmsg_cpp for file /home/test_user/usc-arm-calibration/ccny_vision/ar_target/msg/ARMarker.msg */
#ifndef AR_TARGET_MESSAGE_ARMARKER_H
#define AR_TARGET_MESSAGE_ARMARKER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Quaternion.h"

namespace ar_target
{
template <class ContainerAllocator>
struct ARMarker_ {
  typedef ARMarker_<ContainerAllocator> Type;

  ARMarker_()
  : id(0)
  , confidence(0.0)
  , quaternion()
  , u_corners()
  , v_corners()
  {
  }

  ARMarker_(const ContainerAllocator& _alloc)
  : id(0)
  , confidence(0.0)
  , quaternion(_alloc)
  , u_corners(_alloc)
  , v_corners(_alloc)
  {
  }

  typedef int32_t _id_type;
  int32_t id;

  typedef double _confidence_type;
  double confidence;

  typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _quaternion_type;
   ::geometry_msgs::Quaternion_<ContainerAllocator>  quaternion;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _u_corners_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  u_corners;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _v_corners_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  v_corners;


  typedef boost::shared_ptr< ::ar_target::ARMarker_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ar_target::ARMarker_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ARMarker
typedef  ::ar_target::ARMarker_<std::allocator<void> > ARMarker;

typedef boost::shared_ptr< ::ar_target::ARMarker> ARMarkerPtr;
typedef boost::shared_ptr< ::ar_target::ARMarker const> ARMarkerConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ar_target::ARMarker_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ar_target::ARMarker_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ar_target

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ar_target::ARMarker_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ar_target::ARMarker_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ar_target::ARMarker_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ba40cf2d59ac590de20191af30830162";
  }

  static const char* value(const  ::ar_target::ARMarker_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xba40cf2d59ac590dULL;
  static const uint64_t static_value2 = 0xe20191af30830162ULL;
};

template<class ContainerAllocator>
struct DataType< ::ar_target::ARMarker_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ar_target/ARMarker";
  }

  static const char* value(const  ::ar_target::ARMarker_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ar_target::ARMarker_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 id\n\
float64 confidence\n\
geometry_msgs/Quaternion quaternion\n\
float64[] u_corners\n\
float64[] v_corners\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::ar_target::ARMarker_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ar_target::ARMarker_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id);
    stream.next(m.confidence);
    stream.next(m.quaternion);
    stream.next(m.u_corners);
    stream.next(m.v_corners);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ARMarker_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ar_target::ARMarker_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ar_target::ARMarker_<ContainerAllocator> & v) 
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "confidence: ";
    Printer<double>::stream(s, indent + "  ", v.confidence);
    s << indent << "quaternion: ";
s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.quaternion);
    s << indent << "u_corners[]" << std::endl;
    for (size_t i = 0; i < v.u_corners.size(); ++i)
    {
      s << indent << "  u_corners[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.u_corners[i]);
    }
    s << indent << "v_corners[]" << std::endl;
    for (size_t i = 0; i < v.v_corners.size(); ++i)
    {
      s << indent << "  v_corners[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.v_corners[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // AR_TARGET_MESSAGE_ARMARKER_H

