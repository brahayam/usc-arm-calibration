/* Auto-generated by genmsg_cpp for file /home/test_user/usc-arm-calibration/ccny_vision/ar_target/msg/ARMarker3d.msg */
#ifndef AR_TARGET_MESSAGE_ARMARKER3D_H
#define AR_TARGET_MESSAGE_ARMARKER3D_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Point.h"
#include "geometry_msgs/Quaternion.h"
#include "geometry_msgs/Pose.h"

namespace ar_target
{
template <class ContainerAllocator>
struct ARMarker3d_ {
  typedef ARMarker3d_<ContainerAllocator> Type;

  ARMarker3d_()
  : id(0)
  , confidence(0.0)
  , left_u_corners()
  , left_v_corners()
  , right_u_corners()
  , right_v_corners()
  , corner_positions()
  , corner_orientations()
  , center_pose()
  {
  }

  ARMarker3d_(const ContainerAllocator& _alloc)
  : id(0)
  , confidence(0.0)
  , left_u_corners(_alloc)
  , left_v_corners(_alloc)
  , right_u_corners(_alloc)
  , right_v_corners(_alloc)
  , corner_positions(_alloc)
  , corner_orientations(_alloc)
  , center_pose(_alloc)
  {
  }

  typedef int32_t _id_type;
  int32_t id;

  typedef double _confidence_type;
  double confidence;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _left_u_corners_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  left_u_corners;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _left_v_corners_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  left_v_corners;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _right_u_corners_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  right_u_corners;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _right_v_corners_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  right_v_corners;

  typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _corner_positions_type;
  std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  corner_positions;

  typedef std::vector< ::geometry_msgs::Quaternion_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Quaternion_<ContainerAllocator> >::other >  _corner_orientations_type;
  std::vector< ::geometry_msgs::Quaternion_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Quaternion_<ContainerAllocator> >::other >  corner_orientations;

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _center_pose_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  center_pose;


  typedef boost::shared_ptr< ::ar_target::ARMarker3d_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ar_target::ARMarker3d_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ARMarker3d
typedef  ::ar_target::ARMarker3d_<std::allocator<void> > ARMarker3d;

typedef boost::shared_ptr< ::ar_target::ARMarker3d> ARMarker3dPtr;
typedef boost::shared_ptr< ::ar_target::ARMarker3d const> ARMarker3dConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ar_target::ARMarker3d_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ar_target::ARMarker3d_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ar_target

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ar_target::ARMarker3d_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ar_target::ARMarker3d_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ar_target::ARMarker3d_<ContainerAllocator> > {
  static const char* value() 
  {
    return "021ad2e065a4adf63c3646ebb26746f9";
  }

  static const char* value(const  ::ar_target::ARMarker3d_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x021ad2e065a4adf6ULL;
  static const uint64_t static_value2 = 0x3c3646ebb26746f9ULL;
};

template<class ContainerAllocator>
struct DataType< ::ar_target::ARMarker3d_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ar_target/ARMarker3d";
  }

  static const char* value(const  ::ar_target::ARMarker3d_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ar_target::ARMarker3d_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 id\n\
float64 confidence\n\
float64[] left_u_corners\n\
float64[] left_v_corners\n\
float64[] right_u_corners\n\
float64[] right_v_corners\n\
geometry_msgs/Point[] corner_positions\n\
geometry_msgs/Quaternion[] corner_orientations\n\
geometry_msgs/Pose center_pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
";
  }

  static const char* value(const  ::ar_target::ARMarker3d_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ar_target::ARMarker3d_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id);
    stream.next(m.confidence);
    stream.next(m.left_u_corners);
    stream.next(m.left_v_corners);
    stream.next(m.right_u_corners);
    stream.next(m.right_v_corners);
    stream.next(m.corner_positions);
    stream.next(m.corner_orientations);
    stream.next(m.center_pose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ARMarker3d_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ar_target::ARMarker3d_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ar_target::ARMarker3d_<ContainerAllocator> & v) 
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "confidence: ";
    Printer<double>::stream(s, indent + "  ", v.confidence);
    s << indent << "left_u_corners[]" << std::endl;
    for (size_t i = 0; i < v.left_u_corners.size(); ++i)
    {
      s << indent << "  left_u_corners[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.left_u_corners[i]);
    }
    s << indent << "left_v_corners[]" << std::endl;
    for (size_t i = 0; i < v.left_v_corners.size(); ++i)
    {
      s << indent << "  left_v_corners[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.left_v_corners[i]);
    }
    s << indent << "right_u_corners[]" << std::endl;
    for (size_t i = 0; i < v.right_u_corners.size(); ++i)
    {
      s << indent << "  right_u_corners[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.right_u_corners[i]);
    }
    s << indent << "right_v_corners[]" << std::endl;
    for (size_t i = 0; i < v.right_v_corners.size(); ++i)
    {
      s << indent << "  right_v_corners[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.right_v_corners[i]);
    }
    s << indent << "corner_positions[]" << std::endl;
    for (size_t i = 0; i < v.corner_positions.size(); ++i)
    {
      s << indent << "  corner_positions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.corner_positions[i]);
    }
    s << indent << "corner_orientations[]" << std::endl;
    for (size_t i = 0; i < v.corner_orientations.size(); ++i)
    {
      s << indent << "  corner_orientations[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "    ", v.corner_orientations[i]);
    }
    s << indent << "center_pose: ";
s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.center_pose);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AR_TARGET_MESSAGE_ARMARKER3D_H

