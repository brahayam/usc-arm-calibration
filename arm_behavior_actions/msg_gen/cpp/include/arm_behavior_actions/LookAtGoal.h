/* Auto-generated by genmsg_cpp for file /home/jbinney/ws/arm/stacks/usc-arm-calibration/arm_behavior_actions/msg/LookAtGoal.msg */
#ifndef ARM_BEHAVIOR_ACTIONS_MESSAGE_LOOKATGOAL_H
#define ARM_BEHAVIOR_ACTIONS_MESSAGE_LOOKATGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Point.h"

namespace arm_behavior_actions
{
template <class ContainerAllocator>
struct LookAtGoal_ {
  typedef LookAtGoal_<ContainerAllocator> Type;

  LookAtGoal_()
  : pos()
  , lower_pan(0.0)
  , lower_tilt(0.0)
  {
  }

  LookAtGoal_(const ContainerAllocator& _alloc)
  : pos(_alloc)
  , lower_pan(0.0)
  , lower_tilt(0.0)
  {
  }

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pos_type;
   ::geometry_msgs::Point_<ContainerAllocator>  pos;

  typedef double _lower_pan_type;
  double lower_pan;

  typedef double _lower_tilt_type;
  double lower_tilt;


  typedef boost::shared_ptr< ::arm_behavior_actions::LookAtGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_behavior_actions::LookAtGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct LookAtGoal
typedef  ::arm_behavior_actions::LookAtGoal_<std::allocator<void> > LookAtGoal;

typedef boost::shared_ptr< ::arm_behavior_actions::LookAtGoal> LookAtGoalPtr;
typedef boost::shared_ptr< ::arm_behavior_actions::LookAtGoal const> LookAtGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_behavior_actions::LookAtGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_behavior_actions::LookAtGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_behavior_actions

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_behavior_actions::LookAtGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_behavior_actions::LookAtGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_behavior_actions::LookAtGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e285967859f3b4649938b636f17ac061";
  }

  static const char* value(const  ::arm_behavior_actions::LookAtGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe285967859f3b464ULL;
  static const uint64_t static_value2 = 0x9938b636f17ac061ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_behavior_actions::LookAtGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_behavior_actions/LookAtGoal";
  }

  static const char* value(const  ::arm_behavior_actions::LookAtGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_behavior_actions::LookAtGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Define the goal\n\
geometry_msgs/Point pos\n\
float64 lower_pan\n\
float64 lower_tilt\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::arm_behavior_actions::LookAtGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::arm_behavior_actions::LookAtGoal_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_behavior_actions::LookAtGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pos);
    stream.next(m.lower_pan);
    stream.next(m.lower_tilt);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LookAtGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_behavior_actions::LookAtGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_behavior_actions::LookAtGoal_<ContainerAllocator> & v) 
  {
    s << indent << "pos: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pos);
    s << indent << "lower_pan: ";
    Printer<double>::stream(s, indent + "  ", v.lower_pan);
    s << indent << "lower_tilt: ";
    Printer<double>::stream(s, indent + "  ", v.lower_tilt);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_BEHAVIOR_ACTIONS_MESSAGE_LOOKATGOAL_H

