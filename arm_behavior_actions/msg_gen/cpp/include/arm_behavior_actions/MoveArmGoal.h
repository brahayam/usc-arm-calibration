/* Auto-generated by genmsg_cpp for file /home/test_user/usc-arm-calibration/arm_behavior_actions/msg/MoveArmGoal.msg */
#ifndef ARM_BEHAVIOR_ACTIONS_MESSAGE_MOVEARMGOAL_H
#define ARM_BEHAVIOR_ACTIONS_MESSAGE_MOVEARMGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace arm_behavior_actions
{
template <class ContainerAllocator>
struct MoveArmGoal_ {
  typedef MoveArmGoal_<ContainerAllocator> Type;

  MoveArmGoal_()
  : goal_joint_configuration()
  {
  }

  MoveArmGoal_(const ContainerAllocator& _alloc)
  : goal_joint_configuration(_alloc)
  {
  }

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _goal_joint_configuration_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  goal_joint_configuration;


  typedef boost::shared_ptr< ::arm_behavior_actions::MoveArmGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_behavior_actions::MoveArmGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MoveArmGoal
typedef  ::arm_behavior_actions::MoveArmGoal_<std::allocator<void> > MoveArmGoal;

typedef boost::shared_ptr< ::arm_behavior_actions::MoveArmGoal> MoveArmGoalPtr;
typedef boost::shared_ptr< ::arm_behavior_actions::MoveArmGoal const> MoveArmGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_behavior_actions::MoveArmGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_behavior_actions::MoveArmGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_behavior_actions

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_behavior_actions::MoveArmGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_behavior_actions::MoveArmGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_behavior_actions::MoveArmGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "689937bd3834951d809d1e8f6ef97f86";
  }

  static const char* value(const  ::arm_behavior_actions::MoveArmGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x689937bd3834951dULL;
  static const uint64_t static_value2 = 0x809d1e8f6ef97f86ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_behavior_actions::MoveArmGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_behavior_actions/MoveArmGoal";
  }

  static const char* value(const  ::arm_behavior_actions::MoveArmGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_behavior_actions::MoveArmGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Define the goal\n\
float64[] goal_joint_configuration\n\
\n\
";
  }

  static const char* value(const  ::arm_behavior_actions::MoveArmGoal_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_behavior_actions::MoveArmGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.goal_joint_configuration);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MoveArmGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_behavior_actions::MoveArmGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_behavior_actions::MoveArmGoal_<ContainerAllocator> & v) 
  {
    s << indent << "goal_joint_configuration[]" << std::endl;
    for (size_t i = 0; i < v.goal_joint_configuration.size(); ++i)
    {
      s << indent << "  goal_joint_configuration[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.goal_joint_configuration[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_BEHAVIOR_ACTIONS_MESSAGE_MOVEARMGOAL_H

