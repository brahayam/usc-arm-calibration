/* Auto-generated by genmsg_cpp for file /home/jbinney/ws/arm/stacks/usc-arm-calibration/arm_msgs/msg/StatusReport.msg */
#ifndef ARM_MSGS_MESSAGE_STATUSREPORT_H
#define ARM_MSGS_MESSAGE_STATUSREPORT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace arm_msgs
{
template <class ContainerAllocator>
struct StatusReport_ {
  typedef StatusReport_<ContainerAllocator> Type;

  StatusReport_()
  : status()
  , mode(0)
  {
  }

  StatusReport_(const ContainerAllocator& _alloc)
  : status(_alloc)
  , mode(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  status;

  typedef int8_t _mode_type;
  int8_t mode;

  enum { DEBUG = 0 };
  enum { INFO = 1 };
  enum { WARN = 2 };
  enum { ERROR = 3 };
  enum { FATAL = 4 };

  typedef boost::shared_ptr< ::arm_msgs::StatusReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_msgs::StatusReport_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StatusReport
typedef  ::arm_msgs::StatusReport_<std::allocator<void> > StatusReport;

typedef boost::shared_ptr< ::arm_msgs::StatusReport> StatusReportPtr;
typedef boost::shared_ptr< ::arm_msgs::StatusReport const> StatusReportConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_msgs::StatusReport_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_msgs::StatusReport_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_msgs::StatusReport_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_msgs::StatusReport_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_msgs::StatusReport_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fd2942673344a91e4bdac1ddc7fa57aa";
  }

  static const char* value(const  ::arm_msgs::StatusReport_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfd2942673344a91eULL;
  static const uint64_t static_value2 = 0x4bdac1ddc7fa57aaULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_msgs::StatusReport_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_msgs/StatusReport";
  }

  static const char* value(const  ::arm_msgs::StatusReport_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_msgs::StatusReport_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string status\n\
int8 mode\n\
int8 DEBUG=0\n\
int8 INFO=1\n\
int8 WARN=2\n\
int8 ERROR=3\n\
int8 FATAL=4\n\
";
  }

  static const char* value(const  ::arm_msgs::StatusReport_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_msgs::StatusReport_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.status);
    stream.next(m.mode);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StatusReport_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_msgs::StatusReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_msgs::StatusReport_<ContainerAllocator> & v) 
  {
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
    s << indent << "mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.mode);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_MSGS_MESSAGE_STATUSREPORT_H

