/* Auto-generated by genmsg_cpp for file /home/jbinney/ws/arm/stacks/usc-arm-calibration/arm_msgs/msg/InertialParameters.msg */
#ifndef ARM_MSGS_MESSAGE_INERTIALPARAMETERS_H
#define ARM_MSGS_MESSAGE_INERTIALPARAMETERS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Vector3.h"

namespace arm_msgs
{
template <class ContainerAllocator>
struct InertialParameters_ {
  typedef InertialParameters_<ContainerAllocator> Type;

  InertialParameters_()
  : mass(0.0)
  , cog()
  , inertia_tensor()
  {
    inertia_tensor.assign(0.0);
  }

  InertialParameters_(const ContainerAllocator& _alloc)
  : mass(0.0)
  , cog(_alloc)
  , inertia_tensor()
  {
    inertia_tensor.assign(0.0);
  }

  typedef double _mass_type;
  double mass;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _cog_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  cog;

  typedef boost::array<double, 6>  _inertia_tensor_type;
  boost::array<double, 6>  inertia_tensor;


  typedef boost::shared_ptr< ::arm_msgs::InertialParameters_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_msgs::InertialParameters_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct InertialParameters
typedef  ::arm_msgs::InertialParameters_<std::allocator<void> > InertialParameters;

typedef boost::shared_ptr< ::arm_msgs::InertialParameters> InertialParametersPtr;
typedef boost::shared_ptr< ::arm_msgs::InertialParameters const> InertialParametersConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_msgs::InertialParameters_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_msgs::InertialParameters_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_msgs::InertialParameters_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_msgs::InertialParameters_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_msgs::InertialParameters_<ContainerAllocator> > {
  static const char* value() 
  {
    return "75bb54439c911c53bebd7796cc0842a0";
  }

  static const char* value(const  ::arm_msgs::InertialParameters_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x75bb54439c911c53ULL;
  static const uint64_t static_value2 = 0xbebd7796cc0842a0ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_msgs::InertialParameters_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_msgs/InertialParameters";
  }

  static const char* value(const  ::arm_msgs::InertialParameters_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_msgs::InertialParameters_<ContainerAllocator> > {
  static const char* value() 
  {
    return "##inertial parameters needed to define a rigid object\n\
float64 mass\n\
geometry_msgs/Vector3 cog\n\
\n\
## since it is symmetric we represent only the first 6 elements of the inertia tensor\n\
## in order I11, I12, I13, I22, I23, I33\n\
float64[6] inertia_tensor  \n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::arm_msgs::InertialParameters_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::arm_msgs::InertialParameters_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_msgs::InertialParameters_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.mass);
    stream.next(m.cog);
    stream.next(m.inertia_tensor);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct InertialParameters_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_msgs::InertialParameters_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_msgs::InertialParameters_<ContainerAllocator> & v) 
  {
    s << indent << "mass: ";
    Printer<double>::stream(s, indent + "  ", v.mass);
    s << indent << "cog: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.cog);
    s << indent << "inertia_tensor[]" << std::endl;
    for (size_t i = 0; i < v.inertia_tensor.size(); ++i)
    {
      s << indent << "  inertia_tensor[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.inertia_tensor[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_MSGS_MESSAGE_INERTIALPARAMETERS_H

