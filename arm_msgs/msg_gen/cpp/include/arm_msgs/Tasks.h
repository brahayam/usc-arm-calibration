/* Auto-generated by genmsg_cpp for file /home/jbinney/ws/arm/stacks/usc-arm-calibration/arm_msgs/msg/Tasks.msg */
#ifndef ARM_MSGS_MESSAGE_TASKS_H
#define ARM_MSGS_MESSAGE_TASKS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "arm_msgs/Task.h"

namespace arm_msgs
{
template <class ContainerAllocator>
struct Tasks_ {
  typedef Tasks_<ContainerAllocator> Type;

  Tasks_()
  : tasks()
  {
  }

  Tasks_(const ContainerAllocator& _alloc)
  : tasks(_alloc)
  {
  }

  typedef std::vector< ::arm_msgs::Task_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::arm_msgs::Task_<ContainerAllocator> >::other >  _tasks_type;
  std::vector< ::arm_msgs::Task_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::arm_msgs::Task_<ContainerAllocator> >::other >  tasks;


  typedef boost::shared_ptr< ::arm_msgs::Tasks_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_msgs::Tasks_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Tasks
typedef  ::arm_msgs::Tasks_<std::allocator<void> > Tasks;

typedef boost::shared_ptr< ::arm_msgs::Tasks> TasksPtr;
typedef boost::shared_ptr< ::arm_msgs::Tasks const> TasksConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_msgs::Tasks_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_msgs::Tasks_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_msgs::Tasks_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_msgs::Tasks_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_msgs::Tasks_<ContainerAllocator> > {
  static const char* value() 
  {
    return "32b37a461a42726bf357da3d85ad3059";
  }

  static const char* value(const  ::arm_msgs::Tasks_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x32b37a461a42726bULL;
  static const uint64_t static_value2 = 0xf357da3d85ad3059ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_msgs::Tasks_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_msgs/Tasks";
  }

  static const char* value(const  ::arm_msgs::Tasks_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_msgs::Tasks_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_msgs/Task[] tasks\n\
================================================================================\n\
MSG: arm_msgs/Task\n\
string type\n\
string GRASP=grasp\n\
string STAPLE=staple\n\
string SWITCH_ON=turn_on\n\
string OPEN=open\n\
string UNLOCK=unlock\n\
string DRILL_HOLE=drill_hole\n\
string HANG_UP=hang_up\n\
string object_name\n\
string model_file_name\n\
\n\
";
  }

  static const char* value(const  ::arm_msgs::Tasks_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_msgs::Tasks_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.tasks);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Tasks_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_msgs::Tasks_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_msgs::Tasks_<ContainerAllocator> & v) 
  {
    s << indent << "tasks[]" << std::endl;
    for (size_t i = 0; i < v.tasks.size(); ++i)
    {
      s << indent << "  tasks[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::arm_msgs::Task_<ContainerAllocator> >::stream(s, indent + "    ", v.tasks[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_MSGS_MESSAGE_TASKS_H

