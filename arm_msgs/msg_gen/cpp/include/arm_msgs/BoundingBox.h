/* Auto-generated by genmsg_cpp for file /home/test_user/usc-arm-calibration/arm_msgs/msg/BoundingBox.msg */
#ifndef ARM_MSGS_MESSAGE_BOUNDINGBOX_H
#define ARM_MSGS_MESSAGE_BOUNDINGBOX_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Point.h"
#include "geometry_msgs/Point.h"

namespace arm_msgs
{
template <class ContainerAllocator>
struct BoundingBox_ {
  typedef BoundingBox_<ContainerAllocator> Type;

  BoundingBox_()
  : mode(0)
  , min()
  , max()
  {
  }

  BoundingBox_(const ContainerAllocator& _alloc)
  : mode(0)
  , min(_alloc)
  , max(_alloc)
  {
  }

  typedef int8_t _mode_type;
  int8_t mode;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _min_type;
   ::geometry_msgs::Point_<ContainerAllocator>  min;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _max_type;
   ::geometry_msgs::Point_<ContainerAllocator>  max;

  enum { IGNORE = 0 };
  enum { INSIDE_BOX = 1 };
  enum { OUTSIDE_BOX = 2 };

  typedef boost::shared_ptr< ::arm_msgs::BoundingBox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_msgs::BoundingBox_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BoundingBox
typedef  ::arm_msgs::BoundingBox_<std::allocator<void> > BoundingBox;

typedef boost::shared_ptr< ::arm_msgs::BoundingBox> BoundingBoxPtr;
typedef boost::shared_ptr< ::arm_msgs::BoundingBox const> BoundingBoxConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_msgs::BoundingBox_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_msgs::BoundingBox_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_msgs::BoundingBox_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_msgs::BoundingBox_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_msgs::BoundingBox_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7ab7357275926cbb346e4228ccedcaf3";
  }

  static const char* value(const  ::arm_msgs::BoundingBox_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7ab7357275926cbbULL;
  static const uint64_t static_value2 = 0x346e4228ccedcaf3ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_msgs::BoundingBox_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_msgs/BoundingBox";
  }

  static const char* value(const  ::arm_msgs::BoundingBox_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_msgs::BoundingBox_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 IGNORE=0\n\
int8 INSIDE_BOX=1\n\
int8 OUTSIDE_BOX=2\n\
int8 mode\n\
geometry_msgs/Point min\n\
geometry_msgs/Point max\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::arm_msgs::BoundingBox_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::arm_msgs::BoundingBox_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_msgs::BoundingBox_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.mode);
    stream.next(m.min);
    stream.next(m.max);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BoundingBox_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_msgs::BoundingBox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_msgs::BoundingBox_<ContainerAllocator> & v) 
  {
    s << indent << "mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "min: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.min);
    s << indent << "max: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.max);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_MSGS_MESSAGE_BOUNDINGBOX_H

