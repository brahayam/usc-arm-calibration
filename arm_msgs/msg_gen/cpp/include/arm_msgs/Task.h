/* Auto-generated by genmsg_cpp for file /home/test_user/usc-arm-calibration/arm_msgs/msg/Task.msg */
#ifndef ARM_MSGS_MESSAGE_TASK_H
#define ARM_MSGS_MESSAGE_TASK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace arm_msgs
{
template <class ContainerAllocator>
struct Task_ {
  typedef Task_<ContainerAllocator> Type;

  Task_()
  : type()
  , object_name()
  , model_file_name()
  {
  }

  Task_(const ContainerAllocator& _alloc)
  : type(_alloc)
  , object_name(_alloc)
  , model_file_name(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  type;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _object_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  object_name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _model_file_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  model_file_name;

  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  GRASP;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  STAPLE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SWITCH_ON;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OPEN;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  UNLOCK;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  DRILL_HOLE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  HANG_UP;

  typedef boost::shared_ptr< ::arm_msgs::Task_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_msgs::Task_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Task
typedef  ::arm_msgs::Task_<std::allocator<void> > Task;

typedef boost::shared_ptr< ::arm_msgs::Task> TaskPtr;
typedef boost::shared_ptr< ::arm_msgs::Task const> TaskConstPtr;

template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Task_<ContainerAllocator>::GRASP = "grasp";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Task_<ContainerAllocator>::STAPLE = "staple";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Task_<ContainerAllocator>::SWITCH_ON = "turn_on";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Task_<ContainerAllocator>::OPEN = "open";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Task_<ContainerAllocator>::UNLOCK = "unlock";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Task_<ContainerAllocator>::DRILL_HOLE = "drill_hole";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Task_<ContainerAllocator>::HANG_UP = "hang_up";

template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_msgs::Task_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_msgs::Task_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_msgs::Task_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_msgs::Task_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_msgs::Task_<ContainerAllocator> > {
  static const char* value() 
  {
    return "af0fe32f3bc95dcfb1565d4f6a906682";
  }

  static const char* value(const  ::arm_msgs::Task_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xaf0fe32f3bc95dcfULL;
  static const uint64_t static_value2 = 0xb1565d4f6a906682ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_msgs::Task_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_msgs/Task";
  }

  static const char* value(const  ::arm_msgs::Task_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_msgs::Task_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string type\n\
string GRASP=grasp\n\
string STAPLE=staple\n\
string SWITCH_ON=turn_on\n\
string OPEN=open\n\
string UNLOCK=unlock\n\
string DRILL_HOLE=drill_hole\n\
string HANG_UP=hang_up\n\
string object_name\n\
string model_file_name\n\
\n\
";
  }

  static const char* value(const  ::arm_msgs::Task_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_msgs::Task_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.type);
    stream.next(m.object_name);
    stream.next(m.model_file_name);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Task_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_msgs::Task_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_msgs::Task_<ContainerAllocator> & v) 
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "object_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object_name);
    s << indent << "model_file_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.model_file_name);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_MSGS_MESSAGE_TASK_H

